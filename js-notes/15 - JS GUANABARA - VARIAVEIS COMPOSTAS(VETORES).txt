/* VARIAVEIS COMPOSTAS (VETORES)     

As variaveis compostas devem ser capazes de armazenar varios valores em uma mesma estrutura.

As variaveis simples so conseguem armazenar um valor por vez.

Lembrando da aula de variaveis, e do nosso estacionamento:

Se fossem 200 vagas imagina escrever uma por uma com variavel simples? Ia ficar um c√≥digo gigante.

Agora vamos propor uma outra forma de fazer, muito mais simples usando vetores, n√£o vamos mais usar identificadores (a1,a2,a3,a4,a5) em cada uma das vagas, vou chamar elas todas pelo mesmo nome.

Todas essas vagas v√£o se chamar a:
//Que s√£o as vagas de automoveis.

  
   a
 
0 | | 

1 | | 

2 | | 
 
3 | | 

4 | |     
 
5 | |           

//E elas v√£o possuir um identificador de indice, uma chave que vai identificar cada uma delas, e para declarar so uso uma linha. Reduzindo muito o c√≥digo.

//O indice come√ßa do 0 lembre sempre disso.

Vamos usar colchetes nos vetores [].

//vaga a = []

E para preencher as vagas com tr√™s carros:

vaga a = [0,1,2]

a vai ser o nosso array/vetor, ou variavel composta. Vetor √© uma variavel com varios espacinhos, exatamente como mostramos.

O vetor √© composto de elementos, o elemento de um vetor √© um par que agrupa o espa√ßo da mem√≥ria, o valor colocado dentro dele e o indice.

Cada elemento √© composto por seu valor e uma chave de identifica√ß√£o.

Gr√°fico:
   a
   [üöó] [üöó] [üöó]  
    0     1     2

a: vetor
0 1 2: indice chave de identifica√ß√£
[][][]:elemento  
üöó: conteudo valor (conteudo de cada elemento)  

*/

//Vamos codar: em vez de var vamos usar let nesse caso.

let num = [5,8,4]
//Indice:  0 1 2

/*Gr√°fico:
   a
   [5]   [8]   [4]  
    0     1     2
*/

//console.log(`Nosso vetor √© o ${num}`)

console.log(num) //Assim ele vem com os colchetes [] na saida.

//Se eu quiser acrescentar mais um espa√ßo fa√ßo assim: Onde esse espa√ßo vai armazenar o valor 6.

num [3] = 6

/*Gr√°fico:
   a
   [5]   [8]   [4]   [6]  
    0     1     2     3
*/

//E se eu quiser acrescentar um valor a ultima casa do vetor, sem me preocupar quantas casas tem? Comando interno muito facil:

num.push(7) //7 √© o valor que queremos colocar na ultima posi√ß√£o, criando um novo elemento na posi√ß√£o 4.

/*Gr√°fico:
   a
   [5]   [8]   [4]   [6]   [7]
    0     1     2     3     4
*/

//Para saber o comprimento do array:

num.length //Vai nos trazer quantos elementos temos no nosso vetor, n√£o tem parenteses ao lado pois n√£o √© um m√©todo, √© um atributo.

/*Gr√°fico:
   a
   [5]   [8]   [4]   [6]   [7]
    0     1     2     3     4
    -------------------------
          5 elementos
*/


//Botar o vetor em ordem:

//Temos esse comando tambem para botar os elementos em ordem crescente.



num.sort()

/*Gr√°fico:
   a
   [4]   [5]   [6]   [7]   [8]
    0     1     2     3     4
*/

---------------------------------------------------------

let num = [5,8,2,9,3]
num.push(1) //Adicionamos o 1 a ultima casa, criando mais um elemento no indice 5.
num.sort() //Para colocar em ordem, a saida fica 1,2,3,5,8,9.
console.log(`O vetor tem ${num.length} posi√ß√µes`)
console.log(`O vetor √© ${num}`)
console.log(`Numero na posi√ß√£o 0 √©: ${num[0]}`)
console.log(`Numero na posi√ß√£o 1 √©: ${num[1]}`)


//A ordem influencia, note que se eu usar o push depois do sort o valor 1 fica la no final.


/* Agora queremos escrever os valores contidos nas posi√ß√µes do vetor, um em cada linha. Imagina o trabalho tendo v√°rios elemento.
Note que no c√≥digo a seguir a unica coisa diferente √© o numero do indice, que s√£o nossas chaves indicando a posi√ß√£o dos nossos valores. Ai que v√£o entrar as estruturas de repeti√ß√£o para sanar esse problema:

console.log(num[0])
console.log(num[1])
console.log(num[2])
console.log(num[3])
console.log(num[4])

Se eu criar uma variavel chamada pos, que ela comece valendo 0 e vai at√© 4, que √© exatamente o limite do meu vetor. 

Se eu fizer uma repeti√ß√£o, eu escrevo essa linha de console.log apenas uma vez, e coloco dentro de uma estrutura de repeti√ß√£o.

A grande dificuldade dos vetores, n√£o s√£o os vetores, mas sim as estruturas de repeti√ß√£o que muita gente n√£o domina. Que √© algo bem simples depois que entende.

//Vamos trocar tudo aquilo por apenas duas linhas, usando FOR:
*/

for(let pos=0;pos<num.length;pos++){
    console.log(num[pos])
} 

//Em vez de usar pos = 4 que seria a ultima posi√ß√£o, usamos o pos<num.length, pois ele vai at√© o fim tambem, sendo muito util em casos que n√£o sabemos qual o fim do vetor, ou que adicionamos mais vetores depois, n√£o ter que fazer isso manualmente. Se l√™: pos √© 0, enquanto o pos for menor que o tamanho do vetor, vai receber pos + 1 (pos++).

//Em vez do console.log(num[0]) usamos console.log(num[pos])




//E existe ainda uma maneira mais facil e simplificada para fazer isso.

//Usando o for com o in dentro:
//Otimizado para variaveis compostas e objetos, ele n√£o tem 3 elementos igual o for, tem 2, sendo mais simplificado.

//Primeiro colocamos nossa variavel pos que √© nosso indice, e do lado direito do in basta colocarmos nosso vetor num(variavel composta).

//In a gente l√™ DENTRO/EM.

for(let pos in num){
    console.log(`${num[pos]}`)

}

//Lendo em portugu√™s: PARA cada posi√ß√£o DENTRO de numero. Eu vou mostrar o (num[pos])

//Lendo em portugu√™s: PARA cada posi√ß√£o DENTRO da variavel composta. Eu vou mostrar o (num[pos]).

//Isso so funciona para arrays e objetos. E na verdade mesmo s√£o a mesma coisa, em JAVASCRIPT todo vetor √© um object. 

//Mesmo c√≥digo anterior so que mais bonitinho visualmento pro usu√°rio.
for(let pos in num){
    console.log(`A posi√ß√£o ${pos} tem o valor ${num[pos]}`)
}
 

//E para buscar valores dentro de um vetor? Usamos o .IndexOf()

//.indexOf(7) 

//Com a variavel composta antes, exemplo:

//num.indexOf(7) 

//O de Of √© maiusculo.

//Ele vai procurar no valor debaixo o valor 7

/*Gr√°fico:
   num
   [4]   [5]   [6]   [7]   [8]
    0     1     2     3     4
*/

//E essa fun√ß√£o vai me retornar a chave/indice onde essa valor 7 se encontra. 

//Ele vai me responder tem, e est√° na posi√ß√£o 3.

//Se ele n√£o encontrar o valor ele vai retornar o valor -1, significa no JS que ele pesquisou dentro do vetor e n√£o encontrou.

//Exemplo pr√°tico:

let posicao = num.indexOf(8)
console.log(`O valor 8 esta na posi√ß√£o ${posicao}`)

//O sort la em cima deixa o valor 8 na posi√ß√£o 4.




